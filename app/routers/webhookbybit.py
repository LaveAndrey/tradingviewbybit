from fastapi import APIRouter, Request, HTTPException
from datetime import datetime, timedelta
from typing import Dict
import asyncio
import logging
from app.services.telegram import TelegramBot
from app.services.coinmapketcap import CoinMarketCapService
from app.config import Config
import pytz
import requests

router = APIRouter()
logger = logging.getLogger(__name__)
cmc = CoinMarketCapService(api_key=Config.COINMARKETCAP_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = Config.ID_TABLES  # ID –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã
BYBIT_API_URL = "https://api.bybit.com/v5/market/tickers"

update_tasks: Dict[str, asyncio.Task] = {}


async def get_bybit_price(symbol: str) -> float:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å Bybit"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        clean_symbol = symbol.upper().strip()
        if not clean_symbol:
            raise ValueError("Empty symbol provided")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è Bybit
        trading_pair = f"{clean_symbol}USDT"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Bybit API
        response = requests.get(
            BYBIT_API_URL,
            params={
                "category": "linear",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "spot" –¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
                "symbol": trading_pair
            },
            timeout=10
        )

        response.raise_for_status()
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Bybit
        if not isinstance(data, dict) or 'result' not in data or not data['result']:
            raise ValueError(f"Invalid API response structure: {data}")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        ticker = data["result"]["list"][0]
        price = float(ticker["lastPrice"])
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {clean_symbol} —Å Bybit: {price}")

        return price

    except requests.exceptions.HTTPError as e:
        error_detail = f"{e.response.status_code} - {e.response.text}" if e.response else str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit API: {error_detail}")
        raise HTTPException(
            status_code=502,
            detail=f"Bybit API error: {error_detail}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Å Bybit: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=503,
            detail="Failed to get price from Bybit"
        )


async def update_price_periodically(sheet, row_index: int, symbol: str, entry_price: float, action: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞"""
    moscow_tz = pytz.timezone('Europe/Moscow')

    try:
        entry_time_str = sheet.cell(row_index, 4).value
        entry_time = moscow_tz.localize(datetime.strptime(entry_time_str, "%Y-%m-%d %H:%M:%S"))

        intervals = [
            ('15m', 15 * 60),
            ('1h', 60 * 60),
            ('2h', 2 * 60 * 60),
            ('4h', 4 * 60 * 60),
            ('1d', 24 * 60 * 60),
            ('3d', 3 * 24 * 60 * 60)
        ]

        for name, delay in intervals:
            try:
                target_time = entry_time + timedelta(seconds=delay)
                sleep_duration = (target_time - datetime.now(moscow_tz)).total_seconds()

                if sleep_duration > 0:
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {name} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {symbol}")
                    await asyncio.sleep(sleep_duration)

                current_price = await get_bybit_price(symbol)

                if action.lower() == 'buy':
                    change_pct = ((current_price - entry_price) / entry_price) * 100
                else:
                    change_pct = ((entry_price - current_price) / entry_price) * 100

                col = 5 + intervals.index((name, delay)) * 2
                sheet.update_cell(row_index, col, current_price)
                sheet.update_cell(row_index, col + 1, change_pct / 100)

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
                col_letter = chr(ord('A') + col)
                percent_cell = f"{col_letter}{row_index}"
                sheet.format(percent_cell, {
                    "numberFormat": {
                        "type": "PERCENT",
                        "pattern": "#,##0.00%"
                    }
                })
                format_cell(sheet, row_index, col + 1, change_pct)

                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª {name} –¥–ª—è {symbol}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {name}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_price_periodically: {e}")
    finally:
        if symbol in update_tasks:
            update_tasks.pop(symbol)


@router.post("/webhookbybit")
async def webhook(request: Request):
    try:
        if not hasattr(request.app.state, 'google_sheets'):
            raise HTTPException(status_code=503, detail="Service unavailable")

        client = request.app.state.google_sheets
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1

        data = await request.json()
        logger.info(f"Processing data: {data}")

        ticker = data.get('ticker', 'N/A')
        action = data.get('strategy.order.action', 'N/A')
        symbol = cmc.extract_symbol(ticker.lower())

        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å CoinMarketCap
        market_cap, volume_24h = await cmc.get_market_data(symbol)
        current_price = await get_bybit_price(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            f"{'üü¢' if action.lower() == 'buy' else 'üî¥'} *{action.upper()}*\n\n"
            f"*{symbol.upper()}*\n\n"
            f"PRICE - *{current_price}$*\n"
            f"MARKET CAP - *{cmc.format_number(market_cap)}$*\n"
            f"24H VOLUME - *{cmc.format_number(volume_24h)}$*\n\n"
            f"Trading on Bybit - *https://www.bybit.com*"
        )

        try:
            TelegramBot.send_message(text=message, chat_id=Config.CHAT_ID_TRADES)
            logger.info(message)
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            raise HTTPException(status_code=500, detail="Failed to send notification")

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        sheet.append_row([
            symbol.upper(),
            action.lower(),
            current_price,
            datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M:%S"),
            *[""] * 12  # –ü—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        ])

        row_index = len(sheet.get_all_values())
        task = asyncio.create_task(
            update_price_periodically(sheet, row_index, symbol, float(current_price), action)
        )
        update_tasks[symbol] = task

        return {"status": "success"}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")


def format_cell(sheet, row: int, col: int, value: float):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        col_letter = chr(ord('A') + col - 1)
        cell_ref = f"{col_letter}{row}"

        if value == 0:
            return

        if value >= 0:
            sheet.format(cell_ref, {"backgroundColor": {"red": 0.5, "green": 1, "blue": 0.5}})
        else:
            sheet.format(cell_ref, {"backgroundColor": {"red": 1, "green": 0.5, "blue": 0.5}})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏: {e}")